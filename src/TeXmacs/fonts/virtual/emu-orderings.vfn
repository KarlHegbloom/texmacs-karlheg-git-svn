
(virtual-font
  (lslant (with h (penh (crop less) 0.5 0.0 0.5) (bottom-edge less h)))
  (gslant (with h (penh (crop gtr ) 0.5 0.0 0.5) (bottom-edge gtr  h)))
  (leq (stack-less less (hor-scale minus less)))
  (geq (stack-less gtr  (hor-scale minus gtr)))
  (leqslant (with y (- 0 (+ (sep-equal) (penh (crop less) 0.5 0.0 0.5)))
              (align (join less (0 y lslant)) less * 0.5)))
  (geqslant (with y (- 0 (+ (sep-equal) (penh (crop gtr ) 0.5 0.0 0.5)))
              (align (join gtr  (0 y gslant)) less * 0.5)))
  (leqq (stack-less less (hor-scale = less)))
  (geqq (stack-less gtr  (hor-scale = gtr)))
  (nless (negate less slash3))
  (ngtr (negate gtr slash3))
  (nleq (negate leq slash4))
  (ngeq (negate geq slash4))
  (nleqslant (negate leqslant slash4))
  (ngeqslant (negate geqslant slash4))
  (nleqq (negate leqq slash5))
  (ngeqq (negate geqq slash5))
  (lneq (stack-less less (negate (hor-scale minus less) slash1*)))
  (gneq (stack-less gtr  (negate (hor-scale minus gtr ) slash1*)))
  (lneqq (stack-less less (negate (hor-scale = less) slash2*)))
  (gneqq (stack-less gtr  (negate (hor-scale = gtr ) slash2*)))
  (lvertneqq (stack-less less (negate (hor-scale = less) slash2**)))
  (gvertneqq (stack-less gtr  (negate (hor-scale = gtr ) slash2**)))
  (lessdot (join less (align cdot less 1 0.5)))
  (dotgtr  (join gtr  (align cdot gtr  0 0.5)))
  (leqdot (join leq (align (pretend (align cdot less 1 0.5) less) leq * 1)))
  (dotgeq (join geq (align (pretend (align cdot gtr  0 0.5) gtr ) geq * 1)))
  (leqslantdot (join leqslant (align (pretend (align cdot less 1 0.5) less)
                                     leqslant * 1)))
  (dotgeqslant (join geqslant (align (pretend (align cdot gtr  0 0.5) gtr)
                                     geqslant * 1)))
  (lesssim (stack-less less (hor-scale sim less)))
  (gtrsim  (stack-less gtr  (hor-scale sim gtr)))
  (lessapprox (stack-less less (hor-scale approx less)))
  (gtrapprox  (stack-less gtr  (hor-scale approx gtr)))
  (nlesssim (negate lesssim slash4))
  (ngtrsim  (negate gtrsim  slash4))
  (nlessapprox (negate lessapprox slash5))
  (ngtrapprox  (negate gtrapprox  slash5))
  (lnsim (stack-less less (negate (hor-scale sim less) slash1*)))
  (gnsim (stack-less gtr  (negate (hor-scale sim gtr ) slash1*)))
  (lnapprox (stack-less less (negate (hor-scale approx less) slash2*)))
  (gnapprox (stack-less gtr  (negate (hor-scale approx gtr ) slash2*)))

  (prec* (curly less))
  (prec (curly less))
  (succ* (hor-flip (curly (hor-flip gtr))))
  (succ (hor-flip (curly (hor-flip gtr))))
  (pslant (curly lslant))
  (sslant (hor-flip (curly (hor-flip gslant))))
  (preceq (stack-less prec (hor-scale minus prec)))
  (succeq (stack-less succ (hor-scale minus succ)))
  (preccurlyeq
    (with y (- 0 (+ (sep-equal) (* 0.666 (penh (crop prec) 0.5 0.0 0.5))))
      (with x (- 0 (* 0.1 (width (crop prec))))
        (align (join prec (x y (part pslant 0.2 * * *))) less * 0.5))))
  (succcurlyeq
    (with y (- 0 (+ (sep-equal) (* 0.666 (penh (crop succ) 0.5 0.0 0.5))))
      (with x (* 0.1 (width (crop succ)))
        (align (join succ (x y (part sslant * 0.8 * *))) less * 0.5))))
  (preceqq (stack-less prec (hor-scale = prec)))
  (succeqq (stack-less succ (hor-scale = succ)))
  (nprec (negate prec slash3))
  (nsucc (negate succ slash3))
  (npreceq (negate preceq slash4))
  (nsucceq (negate succeq slash4))
  (npreccurlyeq (negate preccurlyeq slash4))
  (nsucccurlyeq (negate succcurlyeq slash4))
  (npreceqq (negate preceqq slash5))
  (nsucceqq (negate succeqq slash5))
  (precneq (stack-less prec (negate (hor-scale minus prec) slash1*)))
  (succneq (stack-less succ (negate (hor-scale minus succ ) slash1*)))
  (precneqq (stack-less prec (negate (hor-scale = prec) slash2*)))
  (succneqq (stack-less succ (negate (hor-scale = succ) slash2*)))
  (precvertneqq (stack-less prec (negate (hor-scale = prec) slash2**)))
  (succvertneqq (stack-less succ (negate (hor-scale = succ) slash2**)))
  (precdot (join prec (align cdot prec 1 0.5)))
  (succdot (join succ (align cdot succ 0 0.5)))
  (preceqdot (join preceq (align (pretend (align cdot prec 1 0.5) prec)
                                 preceq * 1)))
  (dotsucceq (join succeq (align (pretend (align cdot succ 0 0.5) succ)
                                 succeq * 1)))
  (preccurlyeqdot (join preccurlyeq
                        (align (pretend (align cdot less 1 0.5) less)
                               preccurlyeq * 1)))
  (dotsucccurlyeq (join succcurlyeq
                        (align (pretend (align cdot gtr  0 0.5) gtr)
                               succcurlyeq * 1)))
  (precsim (stack-less prec (hor-scale sim prec)))
  (succsim (stack-less succ (hor-scale sim succ)))
  (precapprox (stack-less prec (hor-scale approx prec)))
  (succapprox (stack-less succ (hor-scale approx succ)))
  (nprecsim (negate precsim slash4))
  (nsuccsim (negate succsim slash4))
  (nprecapprox (negate precapprox slash5))
  (nsuccapprox (negate succapprox slash5))
  (precnsim (stack-less prec (negate (hor-scale sim prec) slash1*)))
  (succnsim (stack-less succ (negate (hor-scale sim succ) slash1*)))
  (precnapprox (stack-less prec (negate (hor-scale approx prec) slash2*)))
  (succnapprox (stack-less succ (negate (hor-scale approx succ) slash2*)))

  (ll (join (0 0 less) (0.3 0 less)))
  (lleq (join (0 0 leq) (0.3 0 leq)))
  (lll (join (0 0 less) (0.3 0 less) (0.6 0 less)))
  (llleq (join (0 0 leq) (0.3 0 leq) (0.6 0 leq)))
  (gg (join (0 0 gtr) (0.3 0 gtr)))
  (ggeq (join (0 0 geq) (0.3 0 geq)))
  (ggg (join (0 0 gtr) (0.3 0 gtr) (0.6 0 gtr)))
  (gggeq (join (0 0 geq) (0.3 0 geq) (0.6 0 geq)))
  (nll (negate ll slash3))
  (nlleq (negate lleq slash4))
  (nlll (negate lll slash3))
  (nllleq (negate llleq slash4))
  (ngg (negate gg slash3))
  (nggeq (negate ggeq slash4))
  (nggg (negate ggg slash3))
  (ngggeq (negate gggeq slash4))

  (precprec (join (0 0 prec) (0.3 0 prec)))
  (precprecprec (join (0 0 prec) (0.3 0 prec) (0.6 0 prec)))
  (precpreceq (join (0 0 preceq) (0.3 0 preceq)))
  (precprecpreceq (join (0 0 preceq) (0.3 0 preceq) (0.6 0 preceq)))
  (succsucc (join (0 0 succ) (0.3 0 succ)))
  (succsuccsucc (join (0 0 succ) (0.3 0 succ) (0.6 0 succ)))
  (succsucceq (join (0 0 succeq) (0.3 0 succeq)))
  (succsuccsucceq (join (0 0 succeq) (0.3 0 succeq) (0.6 0 succeq)))
  (nprecprec (negate precprec slash3))
  (nprecprecprec (negate precprecprec slash3))
  (nprecpreceq (negate precpreceq slash4))
  (nprecprecpreceq (negate precprecpreceq slash4))
  (nsuccsucc (negate succsucc slash3))
  (nsuccsuccsucc (negate succsuccsucc slash3))
  (nsuccsucceq (negate succsucceq slash4))
  (nsuccsuccsucceq (negate succsuccsucceq slash4))

  (vminus/less (with m (- 1.0 (/ (height minus) (height less)))
                 (align (magnify (scale vminus (crop less) * 1) * m)
                        less 0 0.5)))
  (triangleleft  (right-fit less vminus/less 0.5))
  (triangleright (left-fit  gtr  vminus/less 0.5))
  (vartriangleleft  (right-fit less vminus/less 0.5))
  (vartriangleright (left-fit  gtr  vminus/less 0.5))
  (trianglelefteq  (stack-less triangleleft  (hor-scale minus triangleleft)))
  (trianglerighteq (stack-less triangleright (hor-scale minus triangleright)))
  (trianglelefteqslant
    (with y (- 0 (+ (sep-equal) (penh (crop less) 0.5 0.0 0.5)))
      (align (join vartriangleleft (0 y lslant)) less * 0.5)))
  (trianglerighteqslant
    (with y (- 0 (+ (sep-equal) (penh (crop gtr ) 0.5 0.0 0.5)))
      (align (join vartriangleright (0 y gslant)) less * 0.5)))
  (ntriangleleft  (negate triangleleft  slash3))
  (ntriangleright (negate triangleright slash3))
  (ntrianglelefteq  (negate trianglelefteq  slash4))
  (ntrianglerighteq (negate trianglerighteq slash4))
  (ntrianglelefteqslant  (negate trianglelefteqslant  slash4))
  (ntrianglerighteqslant (negate trianglerighteqslant slash4))

  (blacktriangleleft (flood-fill triangleleft 0.5 0.5))
  (blacktriangleright (flood-fill triangleright 0.5 0.5))
  (blacktrianglelefteq
    (stack-less blacktriangleleft  (hor-scale minus blacktriangleleft)))
  (blacktrianglerighteq
    (stack-less blacktriangleright (hor-scale minus blacktriangleright)))
  (blacktrianglelefteqslant
    (with y (- 0 (+ (sep-equal) (penh (crop less) 0.5 0.0 0.5)))
      (align (join blacktriangleleft (0 y lslant)) less * 0.5)))
  (blacktrianglerighteqslant
    (with y (- 0 (+ (sep-equal) (penh (crop gtr ) 0.5 0.0 0.5)))
      (align (join blacktriangleright (0 y gslant)) less * 0.5)))
  (nblacktriangleleft  (negate blacktriangleleft  slash3))
  (nblacktriangleright (negate blacktriangleright slash3))
  (nblacktrianglelefteq  (negate blacktrianglelefteq  slash4))
  (nblacktrianglerighteq (negate blacktrianglerighteq slash4))
  (nblacktrianglelefteqslant  (negate blacktrianglelefteqslant  slash4))
  (nblacktrianglerighteqslant (negate blacktrianglerighteqslant slash4))

  (gtrdot dotgtr)
  (geqdot dotgeq)
  (lesseqdot leqslantdot)
  (gtreqdot dotgeqslant))
