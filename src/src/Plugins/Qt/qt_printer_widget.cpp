
/******************************************************************************
 * MODULE     : qt_printer_widget.cpp
 * DESCRIPTION: A dialog to manage printing of the document. All printing
 *              options set by the user at this stage are applied as a
 *              postprocessing of an already typeset postscript document.
 * COPYRIGHT  : (C) 2010 Miguel de Benito Delgado
 *******************************************************************************
 * This software falls under the GNU general public license version 3 or later.
 * It comes WITHOUT ANY WARRANTY WHATSOEVER. For details, see the file LICENSE
 * in the root directory or <http://www.gnu.org/licenses/gpl-3.0.html>.
 ******************************************************************************/

#include "qt_printer_widget.hpp"
#include "qt_utilities.hpp"   // macros: TYPE_CHECK, NOT_IMPLEMENTED
#include "message.hpp"        // slots stuff

#include <QPrintDialog>
#include <QPrinter>


QPrinter* qt_printer_widget_rep::qtPrinter = NULL;

/**
 * Needed for whitebox_rep::equal, this is just a dummy. Should it not be?
 */
inline bool 
operator== (const PrinterSettings& _l, const PrinterSettings& _r) {
  return _l.accepted == _r.accepted;
}

/**
 * Needed for whitebox_rep::display
 */
inline tm_ostream& 
operator<< (tm_ostream& out, const PrinterSettings& sett) {
  return out << "PrinterSettings: " << from_qstring(sett.printerName) << " - " 
  << from_qstring(sett.fileName) << " - " << from_qstring(sett.paperSize) << "\n";
}

/**
 * Reads the configuration parameters from a QPrinter object.
 */
void
PrinterSettings::getFromQPrinter(const QPrinter& from) {
  printToFile   = !(from.outputFileName().isNull ());
  printerName   = from.printerName ();
  fileName      = from.outputFileName ();
  landscape     = (from.orientation() == QPrinter::Landscape);
  paperSize     = qt_printer_widget_rep::qtPaperSizeToQString(from.paperSize());
  dpi           = from.resolution ();
  firstPage     = from.fromPage ();
  lastPage      = from.toPage ();
#if (QT_VERSION >= 0x040700)
  copyCount     = from.copyCount ();
#endif
  collateCopies = from.collateCopies();
  useColorIf    = (from.colorMode () == QPrinter::Color);
  printProgram  = from.printProgram();
#ifndef Q_WS_WIN
  printerSelectionOption = from.printerSelectionOption();
#endif
}

/**
 * Sets the configuration parameters to a QPrinter object.
 */
void
PrinterSettings::setToQPrinter(QPrinter& to) const {
  to.setResolution(dpi);
  to.setFromTo(firstPage, lastPage);
  to.setOrientation(landscape ? QPrinter::Landscape : QPrinter::Portrait);
  to.setOutputFileName(fileName);
  to.setPaperSize(qt_printer_widget_rep::qStringToQtPaperSize(paperSize));
#if (QT_VERSION >= 0x040700)
  to.setCopyCount(copyCount);
#endif  
  to.setCollateCopies(collateCopies);
  to.setColorMode(useColorIf ? QPrinter::Color : QPrinter::GrayScale);
}


/**
 * 
 */
qt_printer_widget_rep::qt_printer_widget_rep (command _cmd, url _file)
: internalFileToPrint(_file), commandAfterExecution(_cmd) {
  if (!qtPrinter)
    qtPrinter = new QPrinter();
}


/**
 * 
 */ 
void
qt_printer_widget_rep::send (slot s, blackbox val) {
  if (DEBUG_QT)
    cout << "qt_printer_widget_rep::send " << slot_name(s) << LF;
  switch (s) {
    case SLOT_VISIBILITY:   // Activates the widget
    case SLOT_KEYBOARD_FOCUS:
      TYPE_CHECK (type_box (val) == type_helper<bool>::id);
      if (open_box<bool>(val) == true)
        showDialog();
      break;
    default:
      qt_widget_rep::send (s, val);
  }
}


/**
 * Shows the native printer dialog.  All printing options set by the user at 
 * this stage are applied as a postprocessing of an already typeset postscript
 * document. Then takes the Postscript file generated by TeXmacs and creates a 
 * new temporary one applying the options set by the user in the print dialog. 
 * This new file is the one sent to the printer.
 */
void
qt_printer_widget_rep::showDialog () {
  settings.setToQPrinter(*qtPrinter);   // Try to set our preferences
  QPrintDialog pDialog (qtPrinter);   // ONLY THEN (or crash) create the dialog.
  settings.accepted  = (pDialog.exec() == QDialog::Accepted);
  settings.getFromQPrinter(*qtPrinter);
  
  if (! settings.accepted)
    return;  // TODO: display "cancelled message"

  QString _cmd;
  
#ifdef Q_WS_WIN
  
  // Do ugly Windows stuff
  _cmd = "copy /help";
  
  
#else // MacOS and Linux. FIXME: Is this ok??
  
  _cmd = "lpr ";                           // Trailing whitespace is not a typo!
  _cmd += settings.printerSelectionOption; // has effect only on X11
  if(! settings.printerName.isEmpty())
    _cmd += "-P " + settings.printerName;
  
  //_cmd += internalFileToPrint;

#endif

  // At this point we need gsutils...
  
  
  // Send the document to the printer
  //system (_cmd, _file);
  
  // execute the scheme closure
  commandAfterExecution ();   
}


/**
 * Just for internal use, converts QPrinter::PaperSize to a string representation.
 * Massimiliano's code.
 */
QString
qt_printer_widget_rep::qtPaperSizeToQString(const QPrinter::PaperSize _size) {
  
#define PAPER(fmt)  case QPrinter::fmt : return "fmt"
  switch (_size) {
      PAPER (A0) ; PAPER (A1) ; PAPER (A2) ; PAPER (A3) ; PAPER (A4) ;
      PAPER (A5) ; PAPER (A6) ; PAPER (A7) ; PAPER (A8) ; PAPER (A9) ;
      PAPER (B0) ; PAPER (B1) ; PAPER (B2) ; PAPER (B3) ; PAPER (B4) ;
      PAPER (B5) ; PAPER (B6) ; PAPER (B7) ; PAPER (B8) ; PAPER (B9) ;
      PAPER (B10) ;  PAPER (Letter) ;
    default: return "A4";
  }
#undef PAPER
}

/**
 * Just for internal use, converts a string to QPrinter::PaperSize.
 */
QPrinter::PaperSize
qt_printer_widget_rep::qStringToQtPaperSize(const QString& _size) {
  
#define PAPER(fmt)  if(_size == "fmt") return QPrinter::fmt
  PAPER (A0) ; PAPER (A1) ; PAPER (A2) ; PAPER (A3) ; PAPER (A4) ;
  PAPER (A5) ; PAPER (A6) ; PAPER (A7) ; PAPER (A8) ; PAPER (A9) ;
  PAPER (B0) ; PAPER (B1) ; PAPER (B2) ; PAPER (B3) ; PAPER (B4) ;
  PAPER (B5) ; PAPER (B6) ; PAPER (B7) ; PAPER (B8) ; PAPER (B9) ;
  PAPER (B10) ;  PAPER (Letter) ;
  return QPrinter::A4;  // Default
#undef PAPER
}

