
/******************************************************************************
 * MODULE     : qt_printer_widget.hpp
 * DESCRIPTION: A dialog to manage printing of the document
 * COPYRIGHT  : (C) 2010 Miguel de Benito Delgado
 *******************************************************************************
 * This software falls under the GNU general public license version 3 or later.
 * It comes WITHOUT ANY WARRANTY WHATSOEVER. For details, see the file LICENSE
 * in the root directory or <http://www.gnu.org/licenses/gpl-3.0.html>.
 ******************************************************************************/
#ifndef QT_PRINTER_WIDGET_HPP
#define QT_PRINTER_WIDGET_HPP

#include "qt_widget.hpp"
#include "qt_renderer.hpp"

#include <QPrinter>  // QPrinter::PaperSize

/**
 * This structure holds the printing options that we are able to manage or
 * heed. In fact this is not necessary (we could just copy and paste the
 * contents of setToQPrinter() into the proper place) but I'm leaving it here
 * because we might want to save to disk the last printing settings, i.e.
 * serialize this structure.
 */
typedef struct PrinterSettings {
  bool        accepted;  /*! whether the dialog was accepted */
  bool     printToFile;
  bool       landscape;
  bool   collateCopies;
  bool      useColorIf;
  QString  printerName;
  QString     fileName;
  QString    paperSize;
  QString printProgram;
  QString printerSelectionOption;
  int              dpi;  /*! Mostly useless with the native dialogs */
  int        firstPage;  /*! If firstPage == lastPage == 0, print everything */
  int         lastPage;
  int        copyCount;
public:
  PrinterSettings() 
  : accepted(false), printToFile(false), landscape(false), collateCopies(true),
  useColorIf(true), printerName(""), fileName(""), paperSize("A4"), dpi(600),
  firstPage(0), lastPage(0), copyCount(1) {}
  
  void getFromQPrinter(const QPrinter&);
  void setToQPrinter(QPrinter&) const;
  
  friend bool operator== (const PrinterSettings&, const PrinterSettings&);
  friend tm_ostream& operator<< (tm_ostream&, const PrinterSettings&);
  
} PrinterSettings;


/**
 * This implements a printer widget, using the native printer dialogs where
 * available.
 *
 * The "factory" function for this widget is called printer_widget(), 
 * in qt_dialogues.cpp
 */ 
class qt_printer_widget_rep: public qt_widget_rep { 
public:
  qt_printer_widget_rep (command, url);
  ~qt_printer_widget_rep () { };
  
  virtual void          send (slot s, blackbox val);
  widget plain_window_widget (string s) { (void)s; return this; }

  void showDialog ();
  static QString qtPaperSizeToQString(const QPrinter::PaperSize);
  static QPrinter::PaperSize qStringToQtPaperSize(const QString&);

private:        
  static QPrinter*    qtPrinter; // "static" to preserve settings between calls.
  PrinterSettings      settings;
  url internalFileToPrint;       /*! the file generated by TeXmacs */
  command commandAfterExecution; /*! scheme closure to execute after printing */
};

#endif  // QT_PRINTER_WIDGET_HPP

  