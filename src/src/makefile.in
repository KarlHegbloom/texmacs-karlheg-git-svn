
###############################################################################
# MODULE     : main make file for TeXmacs source
# BY         : Joris van der Hoeven, David Allouche
# COPYRIGHT  : This software falls under the GNU general public license;
#              see the file 'LICENSE', which is provided with this package.
###############################################################################

default: all

vpath %.cpp $(shell find . -type d '!' -name Deps '!' -name Objects|tr '\n' ' ')

###############################################################################
# Configuration variables
###############################################################################

tmsrc = @tmsrc@
SO_SUFFIX= @CONFIG_SO@
CONFIG_OS= @CONFIG_OS@

CXX = @CXX@
CXXWARNING = @CONFIG_CXXWARNING@
CXXTEMPLATE = @CONFIG_CXXTEMPLATE@
CXXOPTIMIZE = @CONFIG_CXXOPTIMIZE@ @CONFIG_CXXDIALECT@
CXXDEBUG = @CONFIG_CXXDEBUG@ 
CXXFLAGS = $(CXXWARNING) $(CXXTEMPLATE) $(CXXOPTIMIZE) $(CXXDEBUG) @CONFIG_CXXFLAGS@ @CXXFLAGS@
CPPFLAGS = @CPPFLAGS@
CXXXWINDOW =@CONFIG_CX@
CXXIMLIB2 = @IMLIB2_CFLAGS@
CXXFREETYPE = @FREETYPE_CFLAGS@
CXXICONV = @ICONV_CFLAGS@
CXXGUILE = @GUILE_CFLAGS@
LD = @CXX@
LDFLAGS = @CONFIG_BFLAGS@
LDSTATIC = @CONFIG_BSTATIC@
LDSHARED = @CONFIG_BSHARED@
LDPATH = @CONFIG_BPATH@
LDXWINDOW =@CONFIG_BX@
LDDL = @CONFIG_BDL@
LDIMLIB2 = @IMLIB2_LDFLAGS@
LDFREETYPE = @FREETYPE_LDFLAGS@
LDICONV = @ICONV_LDFLAGS@
LDGUILE = @GUILE_LDFLAGS@
AR = ar
ARFLAGS = -r
RM = rm -f
CP = cp -r -f
GLUE = cd Guile/Glue; ./build-glue
TOUCH = touch

###############################################################################
# Source files
###############################################################################

# The following definition are used to locate source files by name in
# the main TeXmacs source package.
#
# Get the file name of each source file. The files are grouped
# according to the compilation options they require and group they
# belong to (in aggregate compilation).
#
# The enclosing makefile must have a "vpath %.cpp" directive to allow
# make to find the sources files given only their file name.

findsrc_in = \
$(foreach dir,$(patsubst %,$(1)/%,$(2)),\
$(notdir $(wildcard $(dir)/*.cpp $(dir)/*/*.cpp)))
findsrc = $(call findsrc_in,$(1),*)

system_src   := $(call findsrc,System)
classes_src  := $(call findsrc,Classes)
data_src     := $(call findsrc,Data)
guile_src    := $(call findsrc_in,Guile,Scheme) glue_all.cpp
edit_src     := $(call findsrc,Edit)
resource_src := $(call findsrc,Resource)
window_src   := $(call findsrc_in,Window,Event PsDevice Widget)
plugins_src  := $(call findsrc_in,Plugins,Bibtex Freetype Ghostscript Imlib2 \
                                          Ispell Metafont Openssl)
x11_src      := $(call findsrc_in,Plugins,X11)
texmacs_src  := $(call findsrc,Texmacs)
typeset_src  := $(call findsrc,Typeset)
style_src    := $(call findsrc_in,Style,@CONFIG_EXPERIMENTAL@)

# Each makefile will have its own Deps directory. Okay that is a bit
# inefficient, but that is much simpler to maintain.
#
# The enclosing makefile should accumulate a dependences file name in
# $(deps) and define an rule without command for every source file it
# compiles.

make_deps = $(patsubst %.cpp,Deps/%.d,$(notdir $(1)))

texmacs_deps := $(call make_deps,$(system_src) $(classes_src) $(data_src)\
 $(edit_src) $(guile_src) $(resource_src) $(window_src)\
 $(plugins_src) $(x11_src) $(texmacs_src)\
 $(typeset_src) $(style_src))

deps += $(texmacs_deps)

###############################################################################
# Include files
###############################################################################

incl_flags = $(patsubst %,-I%,$(1))

system_incl   := $(call incl_flags,System System/Boot System/Classes System/Files System/Link System/Misc Classes/Abstract Classes/Atomic Classes/Compound Classes/Mathematics Data/Drd Data/String Data/Tree Data/Convert Guile)
classes_incl  := $(system_incl)
data_incl     := $(system_incl) $(call incl_flags,Resource)
resource_incl := $(system_incl) $(call incl_flags,Resource Window)
plugins_incl  := $(resource_incl) $(call incl_flags,Plugins)
window_incl   := $(plugins_incl)
x11_incl      := $(plugins_incl)
style_incl    := $(plugins_incl) $(call incl_flags,Style/Memorizer Style/Environment Style/Evaluate)
typeset_incl  := $(resource_incl) $(call incl_flags,Typeset Typeset/Bridge Typeset/Concat Typeset/Page Edit)
guile_incl    := $(typeset_incl) $(call incl_flags,Plugins Texmacs)
edit_incl     := $(guile_incl) $(call incl_flags,Edit/Editor Edit/Interface Edit/Modify)
texmacs_incl  := $(guile_incl)

###############################################################################
# Dependencies
###############################################################################

deps_incl = $(call incl_flags,System System/Boot System/Classes System/Files System/Link System/Misc Classes/Abstract Classes/Atomic Classes/Compound Classes/Mathematics Data/Drd Data/String Data/Tree Data/Convert Resource Plugins Window Style/Memorizer Typeset Edit Texmacs Guile)

deps_flags = $(deps_incl)\
 $(CPPFLAGS) $(CXXIMLIB2) $(CXXFREETYPE) $(CXXICONV) $(CXXGUILE) \
 -I$(tmsrc)/include $(CXXXWINDOW)
# we should use -I- to separate local includes from system includes, but
# headers of guile 1.6.0 use includes in quotes with names relative to the
# current directory, and that feature is disable by -I-.

$(texmacs_deps): Deps/%.d: %.cpp

$(deps):
	@ echo "make deps: $@"
	@ set -e; $(CXX) -M $(deps_flags) $< \
	  | sed 's|\($*\)\.o[ :]*|Objects/\1.o $@ : |g' > $@; \
	  [ -s $@ ] || $(RM) $@

# To avoid unneeded processing, the Deps will not be included (and thus
# remade if needed) unless the "deps" target has been previously made,
# by hand.

deps: $(deps)
	$(TOUCH) Deps/stamp

.PHONY: deps

ifeq ($(shell test -f Deps/stamp && echo yes || echo no),yes)
include $(deps)
endif

###############################################################################
# Object files
###############################################################################

makeobj = $(patsubst %.cpp,Objects/%.o,$(1))

system_obj   := $(call makeobj,$(system_src))
classes_obj  := $(call makeobj,$(classes_src))
data_obj     := $(call makeobj,$(data_src))
edit_obj     := $(call makeobj,$(edit_src))
guile_obj    := $(call makeobj,$(guile_src))
window_obj   := $(call makeobj,$(window_src))
resource_obj := $(call makeobj,$(resource_src))
x11_obj      := $(call makeobj,$(x11_src))
plugins_obj  := $(call makeobj,$(plugins_src))
texmacs_obj  := $(call makeobj,$(texmacs_src))
typeset_obj  := $(call makeobj,$(typeset_src))
style_obj    := $(call makeobj,$(style_src))

# To enforce some degree of modularity, each object file must be
# compiled with only a specific set of include flags. To achieve that,
# we must disable the default (implicit) compilation rule and define
# an appropriate rule for each object file.

%.o: %.cpp # Disable implicit compilation rule

cxx_flags    = $(strip $(CXX) $(1) -c $< -o $@)
cxx_incl     = $(call cxx_flags,$(1) $(CXXIMLIB2) $(CXXFREETYPE) $(CXXICONV) \
  $(CXXGUILE) $(CPPFLAGS) $(CXXFLAGS)) 

$(system_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(system_incl) -I$(tmsrc)/include)
$(classes_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(classes_incl))
$(data_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(data_incl) -I$(tmsrc)/include)
$(edit_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(edit_incl))
$(guile_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(guile_incl))
$(resource_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(resource_incl))
$(window_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(window_incl))
$(plugins_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(plugins_incl) $(CXXXWINDOW))
$(x11_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(x11_incl) $(CXXXWINDOW))
$(texmacs_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(texmacs_incl))
$(typeset_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(typeset_incl))
$(style_obj): Objects/%.o: %.cpp
	$(call cxx_incl,$(style_incl))

###############################################################################
# Make editor
###############################################################################

# Linking rules
#
# The link_bin function uses different flags depending on the value
# of the $(link) option, and on the host type. Its parameter must be a
# sequence of options for the compiler control which libraries to link
# with and where to find them.
#
# It should be used as the body of rules whose target are executable
# binaries and the prerequisites are the object files being linked in
# the target.

ifeq "$(link)" "shared"
ifeq "$(CONFIG_OS)" "DEC"
link_bin = $(strip $(LD) $(LDFLAGS) -lstdc++ $(LDSHARED) $^ $(1) -o $@)
else
link_bin = $(strip $(LD) $(LDFLAGS) $(LDSHARED) $^ $(1) -o $@)
endif
endif
ifeq "$(link)" "static"
ifeq "$(CONFIG_OS)" "DEC"
link_bin = $(strip $(LD) $(LDFLAGS) $^ $(LDSTATIC) $(1) -lstdc++ -o $@)
else
link_bin = $(strip $(LD) $(LDFLAGS) $^ $(LDSTATIC) $(1) -o $@)
endif
endif

# Compilation of objects
#
# The 'uses' function must be used as a prerequisite of a link rule
# (whose body is a link_bin functian call). It takes a number of
# module names in parameters.

uses = $(sort $(foreach use,$(patsubst %,uses_%,$(1)),$($(use))))

uses_system   := $(system_obj)
uses_classes  := $(classes_obj)
uses_data     := $(data_obj)
uses_resource := $(resource_obj)
uses_window   := $(window_obj)
uses_plugins  := $(plugins_obj)
uses_x11      := $(x11_obj)
uses_typeset  := $(typeset_obj)
uses_style    := $(style_obj)
uses_edit     := $(edit_obj)
uses_glue     := $(guile_obj)
uses_texmacs  := $(texmacs_obj)

# Compilation rules

TEXMACS_objects := $(strip $(call uses,system classes data resource\
 window plugins x11 style typeset edit glue texmacs))

link_options:=-L$(tmsrc)/lib -lm $(LDPATH) $(LDXWINDOW) \
  $(LDGUILE) $(LDIMLIB2) $(LDFREETYPE) $(LDICONV) $(LDDL)

$(tmsrc)/bin/texmacs.bin: Objects/texmacs-$(link).bin
	$(CP) $^ $@

Objects/texmacs-$(link).bin: $(TEXMACS_objects)
	$(call link_bin,$(link_options))

all: $(tmsrc)/bin/texmacs.bin

.PHONY: all $(tmsrc)/bin/texmacs.bin

###############################################################################
# Interface for Guile
###############################################################################

# Compilation of glue
#
# When dependences are generated, the glue code can be rebuilt
# automatically, but only if there is an appropriate rule for
# regenerating the glue source from the scheme documents.

Guile/Glue/glue_%.cpp: Guile/Glue/build-glue-%.scm
	$(MAKE) GLUE

gluesrc = Guile/Glue

GLUE: $(gluesrc)/glue_basic.cpp $(gluesrc)/glue_editor.cpp $(gluesrc)/glue_server.cpp

.PHONY: GLUE

$(gluesrc)/glue_basic.cpp: $(gluesrc)/build-glue.scm
$(gluesrc)/glue_editor.cpp: $(gluesrc)/build-glue.scm 
$(gluesrc)/glue_server.cpp: $(gluesrc)/build-glue.scm

$(gluesrc)/glue_basic.cpp: $(gluesrc)/build-glue-basic.scm
	$(GLUE) build-glue-basic.scm glue_basic.cpp

$(gluesrc)/glue_editor.cpp: $(gluesrc)/build-glue-editor.scm
	$(GLUE) build-glue-editor.scm glue_editor.cpp

$(gluesrc)/glue_server.cpp: $(gluesrc)/build-glue-server.scm
	$(GLUE) build-glue-server.scm glue_server.cpp

###############################################################################
# Cleaning and backup
###############################################################################

DISTR: 
	$(RM) Deps/*.*
	$(RM) Deps/stamp

CLEAN: DISTR
	$(RM) Objects/*.o

clean: CLEAN

maintainer-clean: CLEAN
	$(RM) Objects/*.*

PHONY: DISTR CLEAN clean maintainer-clean
