
#--------------------------------------------------------------------
#
# MODULE      : configure.in
# DESCRIPTION : TeXmacs configuration file for autoconf
# COPYRIGHT   : (C) 2000  Joris van der Hoeven
#
# This software falls under the GNU general public license version 3 or later.
# It comes WITHOUT ANY WARRANTY WHATSOEVER. For details, see the file LICENSE
# in the root directory or <http://www.gnu.org/licenses/gpl-3.0.html>.
#
#--------------------------------------------------------------------

AC_INIT
AC_CONFIG_HEADERS([src/System/config.h:src/System/config.in])
AC_CANONICAL_HOST

#--------------------------------------------------------------------
# Export version and package name 
#--------------------------------------------------------------------

TM_SUBVERSION

PACKAGE="TeXmacs"
DEBIAN_NAME="texmacs"
DEVEL_VERSION="1.99.5"
DEVEL_RELEASE="1"         # I think we should use SVNREV here
STABLE_VERSION="1.99.5"
STABLE_RELEASE="1"

DEVEL_VERSION_MAJOR="1"   #testing
DEVEL_VERSION_MINOR="8"
AC_SUBST(DEVEL_VERSION_MINOR)
AC_SUBST(DEVEL_VERSION_MAJOR)

AC_SUBST(PACKAGE)
AC_SUBST(DEVEL_VERSION)
AC_SUBST(DEVEL_RELEASE)
AC_SUBST(STABLE_VERSION)
AC_SUBST(STABLE_RELEASE)

#--------------------------------------------------------------------
# Checks for C++ compiler
#--------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CXX
AC_PROG_OBJC([clang gcc])
AC_PROG_OBJCXX([clang++ g++])
AC_LANG_CPLUSPLUS
AH_TEMPLATE([OLD_GNU_COMPILER],[Use g++ strictly prior to g++ 3.0])
AC_MSG_CHECKING(whether GNU C++ compiler is default)
case "$GXX" in
  yes )
    GCC_VERSION=`$CC -dumpversion`
    GXX_VERSION=`$CXX -dumpversion`
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING(version of gcc)
    AC_MSG_RESULT($GCC_VERSION)
    AC_MSG_CHECKING(version of g++)
    AC_MSG_RESULT($GXX_VERSION)
    case "$GXX_VERSION" in
      0* | 1* | 2*)
        echo "old style GNU compiler"
        AC_DEFINE([OLD_GNU_COMPILER],[])
      ;;
    esac
  ;;
  *)
    GCC_VERSION="none"
    GXX_VERSION="none"
    AC_MSG_RESULT(no)
    AC_MSG_WARN(cannot find GNU C++ compiler)
  ;;
esac
AC_CPLUSPLUS_STACK

#--------------------------------------------------------------------
# Checks for standard functionality
#--------------------------------------------------------------------

AC_CHECK_TYPES(FILE)
AC_CHECK_TYPES(intptr_t)
AC_CHECK_TYPES(time_t)
AC_CHECK_HEADERS(pty.h util.h)
AC_CHECK_FUNCS(gettimeofday)

#--------------------------------------------------------------------
# External libraries, functions and binaries
#--------------------------------------------------------------------

LC_GUILE
LC_DLOPEN
LC_ICONV
LC_FREETYPE
LC_CAIRO
LC_IMLIB2
LC_AXEL
LC_GS
LC_SQL
LC_SPARKLE

#--------------------------------------------------------------------
# Handle different systems case by case
#--------------------------------------------------------------------
TM_PLATFORM

#--------------------------------------------------------------------
# Temporary fix for link problem
#--------------------------------------------------------------------

case "$GXX_VERSION" in
     3.* | 4.*)
#	 CONFIG_BSTATIC="-static"
	 CONFIG_BSHARED="-dynamic"
     ;;
esac

#--------------------------------------------------------------------
# Check for expat and xcb libraries which exist only on certain OS
#--------------------------------------------------------------------

AC_CHECK_LIB(expat,XML_ParserCreate,[CONFIG_BSTATIC="-lexpat $CONFIG_BSTATIC";CONFIG_STYPE=A])
AC_CHECK_LIB(xcb,xcb_disconnect,[CONFIG_BSTATIC="-lxcb $CONFIG_BSTATIC";CONFIG_STYPE=B])

#--------------------------------------------------------------------
# Memory allocation options
#--------------------------------------------------------------------

AC_ARG_ENABLE(fastalloc,
[  --disable-fastalloc     omit fast allocator for small objects],
    [], [enable_fastalloc="yes"])
case "$enable_fastalloc" in
    yes)
        ;;
    no)
	AC_MSG_RESULT([disabling fast allocator for small objects])
        AC_DEFINE(NO_FAST_ALLOC, 1, [Disable fast memory allocator])
	;;
    *)
	AC_MSG_ERROR([bad option --enable-fastalloc=$enable_fastalloc])
	;;
esac

#--------------------------------------------------------------------
# Experimental options
#--------------------------------------------------------------------

AC_ARG_ENABLE(experimental,
[  --enable-experimental   support new style rewriting code],
    [], [enable_experimental="no"])
case "$enable_experimental" in
    yes)
	AC_MSG_RESULT([enabling experimental style rewriting code])
        AC_DEFINE(EXPERIMENTAL, 1, [Enable experimental style rewriting code])
        CONFIG_EXPERIMENTAL="Memorizer Environment Evaluate"
        ;;
    no)
	AC_MSG_RESULT([disabling experimental style rewriting code])
        CONFIG_EXPERIMENTAL=""
	;;
    *)
	AC_MSG_ERROR([bad option --enable-experimental=$enable_experimental])
	;;
esac
AC_SUBST(CONFIG_EXPERIMENTAL)

#--------------------------------------------------------------------
# MacOS X extensions (spellchecker, image loading)
#--------------------------------------------------------------------

if test x"$CONFIG_OS" = xMACOS; then

AC_ARG_ENABLE(macosx-extensions,
AS_HELP_STRING([--disable-macosx-extensions],
[do not use Mac specific services (spellchecker, image handling, ...)]),
    [], [enable_macosx_extensions="yes"])
case "$enable_macosx_extensions" in
    yes)
	AC_MSG_RESULT([enabling Mac OSX extensions])
        AC_DEFINE(MACOSX_EXTENSIONS, 1, [Enabling Mac OSX extensions])
        CONFIG_MACOS="MacOS"
#        CONFIG_BFLAGS="$CONFIG_BFLAGS -framework IOKit"
        ;;
    no)
	AC_MSG_RESULT([disabling Mac OSX extensions])
        CONFIG_MACOS=""
	;;
    *)
	AC_MSG_ERROR([bad option --enable-macosx-extensions=$enable_macosx_extensions])
	;;
esac
AC_SUBST(CONFIG_MACOS)

fi

#--------------------------------------------------------------------
# Windows console
#--------------------------------------------------------------------

if test x"$CONFIG_OS" = xMINGW; then

AC_ARG_ENABLE(console,
[  --enable-console        enable windows console], [], [])
case "$enable_console" in
    yes)
	AC_MSG_RESULT([enabling Windows console])
        ;;
    *)
	AC_MSG_RESULT([disabling Windows console])
	CONFIG_LDRT="$CONFIG_LDRT -mwindows"
	;;
esac

fi

#--------------------------------------------------------------------
# Gui selection
#--------------------------------------------------------------------

CONFIG_X11=""
CONFIG_COCOA=""
CONFIG_GUI="X11"

AC_ARG_ENABLE(qt,
[  --disable-qt            replace Qt by X11 interface],
    [], [enable_qt="yes"])

case "$enable_qt" in
    yes)
        HACKED_AT_WITH_QT
	if test x"$at_cv_qt_build" = xko; then 
	   AC_MSG_ERROR([cannot find Qt!])
	else
	   AC_MSG_RESULT([enabling Qt port])
           CONFIG_GUI="QT"
           if test x"$CONFIG_OS" = xMACOS; then
              # on Mac we rely on some ObjC code contained in 
              # src/Plugins/MacOS    
              CONFIG_MACOS="MacOS"
           fi
        fi
        ;;
    no)
	CONFIG_QTPIPES="no"
	AC_MSG_RESULT([enabling X11 port])
	;;
    *)
	CONFIG_QTPIPES="no"
	AC_MSG_ERROR([bad option --enable-qt=$enable_qt])
	;;
esac

# Qt Plugins list
PLUGINS_LIST="imageformats,accessible"
if test "$QT5_AVAILABLE" = yes; then
  PLUGINS_LIST="imageformats"
fi
#define([PLUGINS_LIST],[imageformats,accessible])
QT_PLUGINS_LIST="$PLUGINS_LIST"
AC_ARG_ENABLE(QtPlugins,
       AS_HELP_STRING([--enable-QtPlugins@<:@=list@:>@],
		[defaults plugins: imageformats, and possibly more]),
  [QT_PLUGINS_LIST=$enableval],[QT_PLUGINS_LIST="$PLUGINS_LIST"])
case $QT_PLUGINS_LIST in
yes) QT_PLUGINS_LIST="$PLUGINS_LIST";;
no) unset QT_PLUGINS_LIST
esac

[[[ $enable_qt == no ]]] &&  unset QT_PLUGINS_LIST
for p in ${QT_PLUGINS_LIST//,/ }
do [[ -d $QT_PLUGINS_PATH/$p ]] || AC_MSG_ERROR(QT plugins not found!)
done

# Qt Pipes
AC_ARG_ENABLE(qtpipes,
[  --enable-qtpipes        replace UNIX pipes by Qt pipes],
    [], [enable_qtpipes=$CONFIG_QTPIPES])

case "$enable_qtpipes" in
    yes)
        if test x"$CONFIG_GUI" = xQT; then
           AC_DEFINE(QTPIPES, 1, [Enabling Qt pipes])
           AC_MSG_RESULT([enabling Qt pipes])
        else
           AC_MSG_ERROR([QT not enabled!])
        fi
        ;;
    no)
        if test x"$CONFIG_GUI" = xQT; then
           AC_MSG_RESULT([disabling Qt pipes])
        fi
	;;
    *)
	AC_MSG_ERROR([bad option --enable-qtpipes=$enable_qtpipes])
	;;
esac

AC_ARG_ENABLE(cocoa,
[  --enable-cocoa          replace X11 by Cocoa interface],
    [], [enable_cocoa="no"])
case "$enable_cocoa" in
    yes)
	AC_MSG_RESULT([enabling experimental Cocoa port])
	COCOA_CFLAGS=""
	COCOA_LDFLAGS="-framework Cocoa"
        CONFIG_GUI="COCOA"
        ;;
    no)
	AC_MSG_RESULT([disabling experimental Cocoa port])
	;;
    *)
	AC_MSG_ERROR([bad option --enable-cocoa=$enable_cocoa])
	;;
esac

case "$CONFIG_GUI" in
    X11)
	CONFIG_X11="X11 Widkit"
        if test "x${CONFIG_GS}" != "xGhostscript"; then
          CONFIG_X11="$CONFIG_X11 Ghostscript"
        fi
        CONFIG_GUI_DEFINE="X11TEXMACS"
#        AC_DEFINE(X11TEXMACS, 1, [Use standard X11 port])
	;;
    COCOA)
        CONFIG_COCOA="Cocoa"
        CONFIG_GUI_DEFINE="AQUATEXMACS"
#        AC_DEFINE(AQUATEXMACS, 1, [Enable experimental Cocoa port])
	;;
    QT)
        CONFIG_QT="Qt"
        CONFIG_GUI_DEFINE="QTTEXMACS"
#        AC_DEFINE(QTTEXMACS, 1, [Enable experimental Qt port])
	;;
esac

AC_SUBST(COCOA_CFLAGS)
AC_SUBST(COCOA_LDFLAGS)

AC_SUBST(CONFIG_X11)
AC_SUBST(CONFIG_COCOA)
AC_SUBST(CONFIG_QT)
AC_SUBST(CONFIG_GUI)
AC_SUBST(CONFIG_GUI_DEFINE)

AC_SUBST(QT_FRAMEWORKS_PATH)  
AC_SUBST(QT_PLUGINS_PATH)
AC_SUBST(QT_PLUGINS_LIST)

#--------------------------------------------------------------------
# Native PDF renderer based on Hummus
#--------------------------------------------------------------------
LC_HUMMUS

#--------------------------------------------------------------------
# Debugging options
#--------------------------------------------------------------------

TM_DEBUG

#--------------------------------------------------------------------
# Optimization options
#--------------------------------------------------------------------

TM_OPTIMIZE

#--------------------------------------------------------------------
# Fix for Mac OS X with genuine GCC and Qt framework
#--------------------------------------------------------------------

AC_DEFUN([AC_TEXMACS_CXXFLAG_Xarch_x86_64], [
  AC_REQUIRE([AC_PROG_CXX])
  AC_LANG_PUSH([C++])
  OLDCXXFLAGS=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS -arch x86_64 -Xarch_x86_64 -mmacosx-version-min=10.8"
  AC_COMPILE_CHECK([whether C++ compiler supports -Xarch_x86_64],[],[], [
    AC_MSG_RESULT(yes)
    Xarch_x86_64="yes"
  ], [
    AC_MSG_RESULT(no)
    Xarch_x86_64="no"])
  CXXFLAGS=$OLDCXXFLAGS
  AC_LANG_POP([C++])
])

case "${host}" in
  *apple*darwin*)
    AC_TEXMACS_CXXFLAG_Xarch_x86_64
    if test "$Xarch_x86_64" = "no"; then
      QT_CXXFLAGS=`echo $QT_CXXFLAGS | sed "s/ -Xarch_x86_64//g"`
      QT_LDFLAGS=`echo $QT_LDFLAGS | sed "s/ -Xarch_x86_64//g"`
    fi;;
esac



AC_DEFUN([AC_QT_CXXFLAG_stdlib], [
  AC_REQUIRE([AC_PROG_CXX])
  AC_LANG_PUSH([C++])
  OLDCXXFLAGS=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS -stdlib=libc++"
  AC_COMPILE_CHECK([whether C++ compiler supports -stdlib],[],[], [
    AC_MSG_RESULT(yes)
    Stdlib="yes"
  ], [
    AC_MSG_RESULT(no)
    Stdlib="no"])
  CXXFLAGS=$OLDCXXFLAGS
  AC_LANG_POP([C++])
])

case "${host}" in
  *apple*darwin*)
    AC_QT_CXXFLAG_stdlib
    if test "$Stdlib" = "no"; then
      QT_CXXFLAGS=`echo $QT_CXXFLAGS | sed 's/ -stdlib=@<:@^@<:@:space:]]*//g'`
      QT_LDFLAGS=`echo $QT_LDFLAGS | sed 's/ -stdlib=@<:@^@<:@:space:]]*//g'`
    fi;;
esac

#--------------------------------------------------------------------
# Default paths for installation
#--------------------------------------------------------------------

if test "$prefix" = ""; then
  prefix=/usr/local
fi
if test "$prefix" = "NONE"; then
  prefix=/usr/local
fi
if test "$exec_prefix" = ""; then
  exec_prefix='${prefix}'
fi
if test "$exec_prefix" = "NONE"; then
  exec_prefix='${prefix}'
fi
if test "$exec_prefix" = '${prefix}'; then
  exec_prefix='${prefix}'
fi
if test "$includedir" = ""; then
  includedir='${prefix}/include'
fi
if test "$includedir" = "NONE"; then
  includedir='${prefix}/include'
fi
if test "$includedir" = '${prefix}/include'; then
  includedir='${prefix}/include'
fi
if test "$libdir" = ""; then
  libdir='${exec_prefix}/lib'
fi
if test "$libdir" = "NONE"; then
  libdir='${exec_prefix}/lib'
fi
if test "$libdir" = '${exec_prefix}/lib'; then
  libdir='${exec_prefix}/lib'
fi
if test "$bindir" = ""; then
  bindir='${exec_prefix}/bin'
fi
if test "$bindir" = "NONE"; then
  bindir=${exec_prefix}/bin
fi
if test "$bindir" = '${exec_prefix}/bin'; then
  bindir='${exec_prefix}/bin'
fi
if test "$datarootdir" = ""; then
  datarootdir='${prefix}/share'
fi
if test "$datarootdir" = "NONE"; then
  datarootdir='${prefix}/share'
fi
if test "$datarootdir" = '${prefix}/share'; then
  datarootdir='${prefix}/share'
fi
if test "$datadir" = ""; then
  datadir='${prefix}/share'
fi
if test "$datadir" = "NONE"; then
  datadir='${prefix}/share'
fi
if test "$datadir" = '${prefix}/share'; then
  datadir='${prefix}/share'
fi
if test "$mandir" = ""; then
  mandir='${datarootdir}/man'
fi
if test "$mandir" = "NONE"; then
  mandir='${datarootdir}/man'
fi
if test "$mandir" = '${datarootdir}/man'; then
  mandir='${datarootdir}/man'
fi
if test "$libexecdir" = ""; then
  libexecdir='${exec_prefix}/libexec'
fi
if test "$libexecdir" = "NONE"; then
  libexecdir='${exec_prefix}/libexec'
fi
if test "$libexecdir" = '${exec_prefix}/libexec'; then
  libexecdir='${exec_prefix}/libexec'
fi

curdir="`pwd`"
tmorig=${curdir}
tmdir=${PACKAGE}
tmsrc=${curdir}/${tmdir}
tmbin=${libexecdir}/${tmdir}
tmdata=${datadir}/${tmdir}
AC_SUBST(tmorig)
AC_SUBST(tmdir)
AC_SUBST(tmsrc)
AC_SUBST(tmbin)
AC_SUBST(tmdata)

if test "$DEVEL_RELEASE" = "1"; then
  tm_devel=${PACKAGE}-${DEVEL_VERSION}
else
  tm_devel=${PACKAGE}-${DEVEL_VERSION}-R${DEVEL_RELEASE}
fi
tm_devel_release=${PACKAGE}-${DEVEL_VERSION}-${DEVEL_RELEASE}
tm_underscore_devel=${PACKAGE}_${DEVEL_VERSION}
tm_debian_name_devel=${DEBIAN_NAME}_${DEVEL_VERSION}

AC_SUBST(tm_devel)
AC_SUBST(tm_devel_release)
AC_SUBST(tm_underscore_devel)
AC_SUBST(tm_debian_name_devel)

if test "$STABLE_RELEASE" = "1"; then
  tm_stable=${PACKAGE}-${STABLE_VERSION}
else
  tm_stable=${PACKAGE}-${STABLE_VERSION}-R${STABLE_RELEASE}
fi
tm_stable_release=${PACKAGE}-${STABLE_VERSION}-${STABLE_RELEASE}
tm_underscore_stable=${PACKAGE}_${STABLE_VERSION}

AC_SUBST(tm_stable)
AC_SUBST(tm_stable_release)
AC_SUBST(tm_underscore_stable)

#--------------------------------------------------------------------
# Done
#--------------------------------------------------------------------

AC_OUTPUT(Makefile:Makefile.in src/makefile:src/makefile.in src/System/tm_configure.hpp:src/System/tm_configure.in misc/admin/admin.makefile:misc/admin/admin.makefile.in misc/doxygen/Doxyfile:misc/doxygen/Doxyfile.in misc/man/texmacs.1:misc/man/texmacs.1.in packages/redhat/TeXmacs.spec:packages/redhat/TeXmacs.spec.in misc/scripts/fig2ps:misc/scripts/fig2ps.in misc/scripts/texmacs:misc/scripts/texmacs.in TeXmacs/examples/plugins/dynlink/Makefile:TeXmacs/examples/plugins/dynlink/Makefile.in packages/macos/Base.xcconfig:packages/macos/Base.xcconfig.in packages/macos/Info-Xcode.plist:packages/macos/Info-Xcode.plist.in packages/macos/Info.plist:packages/macos/Info.plist.in packages/fedora/TeXmacs.spec:packages/fedora/TeXmacs.spec.in packages/mandriva/TeXmacs.spec:packages/mandriva/TeXmacs.spec.in packages/centos/TeXmacs.spec:packages/centos/TeXmacs.spec.in packages/windows/TeXmacs.iss:packages/windows/TeXmacs.iss.in packages/windows/resource.rc:packages/windows/resource.rc.in packages/debian/changelog:packages/debian/changelog.in packages/debian/control:packages/debian/control.in)
